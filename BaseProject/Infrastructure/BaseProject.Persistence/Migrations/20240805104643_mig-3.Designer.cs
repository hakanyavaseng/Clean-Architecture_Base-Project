// <auto-generated />
using System;
using BaseProject.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseProject.Persistence.Migrations
{
    [DbContext(typeof(BaseProjectDbContext))]
    [Migration("20240805104643_mig-3")]
    partial class mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseProject.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c3ea609-d3e7-4b66-b326-e786f3cbe745"),
                            CreatedDate = new DateTime(2024, 8, 5, 13, 46, 42, 537, DateTimeKind.Local).AddTicks(2544),
                            Name = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("45ce42d0-4ee4-4ade-902e-c2ce7eef6b53"),
                            CreatedDate = new DateTime(2024, 8, 5, 13, 46, 42, 537, DateTimeKind.Local).AddTicks(2561),
                            Name = "Brand 2"
                        });
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1926f23-aa70-475b-95b0-ebe6d1600b7e"),
                            BrandId = new Guid("9c3ea609-d3e7-4b66-b326-e786f3cbe745"),
                            CreatedDate = new DateTime(2024, 8, 5, 13, 46, 42, 538, DateTimeKind.Local).AddTicks(1712),
                            Description = "Description 1",
                            Discount = 0m,
                            Price = 100m,
                            Title = "Product 1"
                        },
                        new
                        {
                            Id = new Guid("d4144813-0e1f-4312-b82d-cc56336eb6da"),
                            BrandId = new Guid("45ce42d0-4ee4-4ade-902e-c2ce7eef6b53"),
                            CreatedDate = new DateTime(2024, 8, 5, 13, 46, 42, 538, DateTimeKind.Local).AddTicks(1724),
                            Description = "Description 2",
                            Discount = 0m,
                            Price = 200m,
                            Title = "Product 2"
                        });
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.Product", b =>
                {
                    b.HasOne("BaseProject.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("BaseProject.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("BaseProject.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
